const notes = ["!Transform and Transitions","Transform property can translate, rotate, adjust size of an element",
"#transform: translate(15px, 20px); //translates x 15px, y 20px","Transforms require prefixing to ensure they work across all platforms",
"Add the following to transform","#-webkit-transform: translate(x,y); //Most mobile devices\n-ms-transform: translate(x,y); //Internet explorer 9\ntransform: translate(x,y);",
"To translate in one direction: use translateX(units) or translateY(units)","scale() changes the size/proportions of the element","#scale(2) //doubles elements size",
"#scale(x,y) //stretches element x units and y units","#scale(.3, 3); //shrinks width to .3 and stretches height to 3x",
"Similar to translate, scaleX(unit), and scaleY(unit) can be used to target individually x or y",
"Rotate(unit) rotates unit by specific amount, typically degrees, however other units can be radians/turns",
"#rotate(45deg) //rotates clockwise 45 deg","#rotate(-45deg) //rotates counter clockwise 45 deg",
"skey(x,y) skews the text in 3D axis","#skew(45deg, 4deg); //skews text 45deg x axis, while y axis 4 deg",
"Similar to translate, and scale, there is skewX() and skewY()","Transform-origin allows for the change of the center of transformations through transform-origin(x, y)",
"Order is important when doing transformations","Transitions allow CSS properties to change over time, simple animations, such as a color changing to another color",
"Transitions require:\n-Beginning state, in base element\n-Ending state, such as :hover or focus\n-Transition functions in beginning state",
"Transitions require -webkit prefix without ms","transition-property: transform //defines what property is going to be transitioned",
"#transition-duration: unit; //unit can be in s(seconds), ms(milliseconds)",
"#transition-timing-function: style //most common styles are ease, linear, ease-in, ease-out, or ease-in-out",
"Transition shorthand","#transition: property duration function delay //combine all four",
"If needing to combine multiple transitions, add a second parameter to every transition such as: transition-property: transform, color;",
"Animations","#@-webit-keyframes aAnimation{}\n@keyframes aAnimation{}","Inside each keyframe is a from, and to, which can be those keywords or %",
"#@keyframes aAnimation{\n 0% {do }\n 50% {do this}\n 100% {do that}\n}\n@keyframes aAnimation{\n from {do }\n to {do that}\n}",
"#animation-name: name //assigns the animation to the element","#animation-duration: time; //assigns how long the animation will take to go from 0 to 100%",
"#animation-timing-function: style; //similar to transition's function there is similar styles",
"#animation-iteration-count: x; //default is 1, defines how many times animation will play",
"#animation-direction: style; //normal, reverse, alternate, alternate-reverse",
"#animation-delay: time; //defines how much time before animation starts",
"#animation: time, style, direction, delay, name //animation shorthand",
"!Canvas, SVG, and Drag 'n Drop",
"Canvas can be checked if its supported by putting the element in HTML with text inside","#<canvas>Your browser does not support canvas</canvas>","Set the height and width of the canvas within the HTML and not CSS since CSS will only determine how big the box is but not change the element itself","After selecting the canvas in JS, use getContext to set the canvas's context","#var context = canvas.getContext(\"2d\"); //specifies we're drawing in 2D","After determining the context, use the variable and set strokeStyle and fillStyle to specific colors","#context.strokeStyle = \"yellow\";\ncontext.fillStyle = \"blue\";","RGB and RGBA (for transparency) can be set to either strokeStyle or fillStyle","After setting the stroke and fill, use fillRect and strokeRect to draw the rectangle's fill and border","#context.fillRect(x1, y1, x2, y2);\ncontext.StrokeRect(x1, y1, x2, y2);","Images can be set to replace fillStyle's color through creating a pattern","#var img = new Image();\nimg.src = \"/path\";\nimg.onload = function (){\n var pattern = context.createPattern(img, \"repeat\");\n context.fillStyle = pattern\n...\n}","Gradients can be used instead of fillStyle","#var gradient = context.createLinearGradient(0,0,0,200);\ngradient.addColorStop(0, \"blue\");\ngradient.addColorStop(1, \"purple\");\n","Arcs can be created with beginPath and closePath","#context.beginPath();\ncontext.arc(args);\ncontext.closePath();","The image drawn from canvas can be saved by window.open(canvas.toDataURL(\"fileName.fileType\"))","Images can be drawn onto the canvas by:","#context.drawImage(document.getElementById(\"image\"), x, y);","Pixel data can be gathered from the canvas by context.getImageData(x1, y1, x2, y2), which can be looped through by .data to search for specific pixel colors","Text can be applied to a canvas through specificying font to the context, along with fillText(text, x, y);","SVG","#<svg viewBox\"0 0 20 20\">\n <circle cx=\"4\" cy=\"4\" r=\"4\" fill=\"blue\"/>\n</svg>","In SCG, there can be <desc> tags to describe the element closed by </desc>","Drag and Drop","Supported in Chrome, FireFox, and Safari\nPartial support in IE\nOpera 12\nUnsupported in IOS and Android","To have a draggable element:","Set the draggable attribute on HTML element to \"true\"","Add event listeners for dragStart, dragOver, and drop"];

export default notes; 